version: '3.8'
services:
  api-gateway:
    container_name: api-gateway
    build:
      context: src/api-gateway
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: api-gateway
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    volumes:
      - ./src/api-gateway/:/var/www/html
      - ./docker/nginx/log/api-gateway:/var/log/nginx/
    networks:
      - app-network
    links:
      - user-service
    depends_on:
      - user-db
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - "5000:8080"
  user-service:
    container_name: user-service
    build:
      context: src/user-service
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: user-service
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    volumes:
      - ./src/user-service/:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - user-db # link den container
    ports:
      - "5001:80"
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  product-service:
    container_name: product-service
    build:
      context: src/product-service
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: product-service
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    volumes:
      - ./src/product-service/:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - product-db
    ports:
      - "5002:80"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  post-service:
    container_name: post-service
    build:
      context: src/post-service
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: post-service
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    volumes:
      - ./src/post-service/:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - post-db
    ports:
      - "5003:80"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  notify-service:
    container_name: notify-service
    build:
      context: src/notify-service
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: notify-service
      SERVICE_TAGS: dev
    working_dir: /var/www/html
    volumes:
      - ./src/notify-service/:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - user-db # link den container
    ports:
      - "5004:80"
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  user-db:
    container_name: user-db
    image: mysql:8.0
    restart: unless-stopped
    tty: true
    ports:
      - "33060:3306"
    environment:
      MYSQL_DATABASE: user_db
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: boykioyb
      MYSQL_PASSWORD: 123456Aa@
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ./docker/mysql/user-db/data:/var/lib/mysql/
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network
  product-db:
    container_name: product-db
    image: mysql:8.0
    restart: unless-stopped
    tty: true
    ports:
      - "33061:3306"
    environment:
      MYSQL_DATABASE: product_db
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: boykioyb
      MYSQL_PASSWORD: 123456Aa@
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ./docker/mysql/product-db/data:/var/lib/mysql/
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network
  post-db:
    container_name: post-db
    image: mysql:8.0
    restart: unless-stopped
    tty: true
    ports:
      - "33062:3306"
    environment:
      MYSQL_DATABASE: post_db
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: boykioyb
      MYSQL_PASSWORD: 123456Aa@
      MYSQL_ROOT_HOST: '%'
    volumes:
      - ./docker/mysql/post-db/data:/var/lib/mysql/
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network
  redis:
    container_name: redis
    image: "redis:alpine"
    command: redis-server --requirepass sOmE_sEcUrE_pAsS
    ports:
      - "6379:6379"
    volumes:
      - ./docker/redis/redis-data:/var/lib/redis
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test:1:1"
    networks:
      - app-network
    depends_on:
      - zookeeper
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-network
  kafka-manager:
    image: sheepkiller/kafka-manager
    ports:
      - "9005:9000"
    volumes:
      - ./kafka-manager-conf:/opt/kafka-manager/conf
      - ./kafka-manager-logs:/opt/kafka-manager/logs
    depends_on:
      - kafka
      - zookeeper
    environment:
      APPLICATION_SECRET: "randomstring"
      ZK_HOSTS: "zookeeper:2181"
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
